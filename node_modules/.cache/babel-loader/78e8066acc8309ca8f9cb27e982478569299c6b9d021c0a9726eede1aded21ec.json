{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nexport default {\n  data() {\n    return {\n      form: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      errors: {} // Store the validation errors from the backend here\n    };\n  },\n\n  methods: {\n    // Your methods here\n    create_user() {\n      axios.post('http://127.0.0.1:8000/api/register', this.form).then(resp => {\n        console.log(resp.data);\n        if (resp.data.status === 'success') {\n          // Registration successful, store the token in local storage\n          localStorage.setItem('authToken', resp.data.token);\n          // Redirect the user to the Welcome page after successful registration\n          this.$router.push('/welcome');\n        } else {\n          // Show error message for unsuccessful registration\n          this.errors = resp.data.error; // Save the validation errors returned from the backend\n          this.showValidationErrors(); // Call the function to display validation errors\n        }\n      }).catch(e => {\n        console.log(e);\n        Swal.fire({\n          title: 'Hurry',\n          text: e,\n          icon: 'warning'\n        });\n      });\n    },\n    showValidationErrors() {\n      // Create an empty array to store the error messages\n      let errorMessages = [];\n      for (const field in this.errors) {\n        // Loop through the errors object and push error messages to the array\n        errorMessages.push(this.errors[field][0]);\n      }\n      // Convert the errorMessages array to a bulleted list with <br> tags\n      const errorMessage = errorMessages.map(error => `• ${error}`).join('<br>');\n      // Show the bulleted list of error messages using SweetAlert2 with custom CSS\n      Swal.fire({\n        title: 'Please fix the following errors:',\n        html: errorMessage,\n        icon: 'warning',\n        customClass: {\n          content: 'text-start' // Set the content text alignment to left\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","Swal","data","form","name","email","password","errors","methods","create_user","post","then","resp","console","log","status","localStorage","setItem","token","$router","push","error","showValidationErrors","catch","e","fire","title","text","icon","errorMessages","field","errorMessage","map","join","html","customClass","content"],"sources":["src/components/RegistrationForm.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"container p-5\">\r\n    <h3 class=\"text-center mt-2 mb-5\">Registration</h3>\r\n    <div class=\"col-md-12\">\r\n\r\n      <form v-on:submit.prevent=\"create_user\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">Enter Name</label>\r\n          <input type=\"text\" name=\"name\" class=\"form-control\" id=\"exampleInputName1\" aria-describedby=\"nameHelp\" placeholder=\"Enter Username\" v-model=\"form.name\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput2\" class=\"form-label\">Enter Email</label>\r\n          <input type=\"text\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput3\" class=\"form-label\">Enter Password</label>\r\n          <input type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPass1\" aria-describedby=\"passHelp\" placeholder=\"Enter Password\" v-model=\"form.password\">\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary mt-5\">Submit</button>\r\n        <router-link to=\"/login\" class=\"ml-3\">Already have an account? Sign In here</router-link>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n\r\n//importing modules\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from 'axios'\r\nimport Swal from 'sweetalert2'\r\nexport default {\r\n  data(){\r\n  return {\r\n   \r\n    form:{\r\n      name: '',\r\n      email: '',\r\n      password: ''\r\n      \r\n    }\r\n  }\r\n},\r\n  methods:{\r\n     //user register function and api call\r\n     create_user(){\r\n    \r\n      axios\r\n      .post('http://127.0.0.1:8000/api/register',this.form)\r\n      .then((_resp) =>{ // eslint-disable-next-line no-unused-vars\r\n      // Do not use the '_resp' variable\r\n          this.form.name = '';\r\n          this.form.email = '';\r\n          this.form.password = '';\r\n\r\n          //success message alert\r\n        //   Swal.fire({\r\n        //   title: 'Hurry',\r\n        //   text:   \"User has been registered successfully\",\r\n        //   icon: 'success',\r\n        // });\r\n\r\n        this.$router.push('/welcome');\r\n\r\n      })\r\n      .catch((e)=>{\r\n          console.log(e); Swal.fire({ title: 'Hurry', text:   e, icon: 'warning', });\r\n      })\r\n    }\r\n  }\r\n  \r\n}\r\n</script> -->\r\n\r\n<template>\r\n  <div class=\"container p-5\">\r\n    <h3 class=\"text-center mt-2 mb-5\">Registration</h3>\r\n    <div class=\"col-md-12\">\r\n      <form v-on:submit.prevent=\"create_user\">\r\n        <!-- Your form fields here -->\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">Enter Name</label>\r\n          <input type=\"text\" name=\"name\" class=\"form-control\" id=\"exampleInputName1\" aria-describedby=\"nameHelp\" placeholder=\"Enter Username\" v-model=\"form.name\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput2\" class=\"form-label\">Enter Email</label>\r\n          <input type=\"text\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput3\" class=\"form-label\">Enter Password</label>\r\n          <input type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPass1\" aria-describedby=\"passHelp\" placeholder=\"Enter Password\" v-model=\"form.password\">\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary mt-5\">Submit</button>\r\n        <router-link to=\"/login\" class=\"ml-3\">Already have an account? Sign In here</router-link>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      form: {\r\n        name: '',\r\n        email: '',\r\n        password: ''\r\n      },\r\n      errors: {} // Store the validation errors from the backend here\r\n    };\r\n  },\r\n  methods: {\r\n    // Your methods here\r\n    create_user() {\r\n      axios\r\n        .post('http://127.0.0.1:8000/api/register', this.form)\r\n        .then((resp) => {\r\n          console.log(resp.data);\r\n          if (resp.data.status === 'success') {\r\n            // Registration successful, store the token in local storage\r\n            localStorage.setItem('authToken', resp.data.token);\r\n            // Redirect the user to the Welcome page after successful registration\r\n            this.$router.push('/welcome');\r\n          } else {\r\n            // Show error message for unsuccessful registration\r\n            this.errors = resp.data.error; // Save the validation errors returned from the backend\r\n            this.showValidationErrors(); // Call the function to display validation errors\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n          Swal.fire({\r\n            title: 'Hurry',\r\n            text: e,\r\n            icon: 'warning',\r\n          });\r\n        });\r\n    },\r\n    showValidationErrors() {\r\n      // Create an empty array to store the error messages\r\n      let errorMessages = [];\r\n      for (const field in this.errors) {\r\n        // Loop through the errors object and push error messages to the array\r\n        errorMessages.push(this.errors[field][0]);\r\n      }\r\n      // Convert the errorMessages array to a bulleted list with <br> tags\r\n      const errorMessage = errorMessages.map((error) => `• ${error}`).join('<br>');\r\n      // Show the bulleted list of error messages using SweetAlert2 with custom CSS\r\n      Swal.fire({\r\n        title: 'Please fix the following errors:',\r\n        html: errorMessage,\r\n        icon: 'warning',\r\n        customClass: {\r\n          content: 'text-start' // Set the content text alignment to left\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";AA6GA;AACA,OAAAA,KAAA;AACA,OAAAC,IAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,IAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,MAAA;IACA;EACA;;EACAC,OAAA;IACA;IACAC,YAAA;MACAT,KAAA,CACAU,IAAA,4CAAAP,IAAA,EACAQ,IAAA,CAAAC,IAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,IAAA,CAAAV,IAAA;QACA,IAAAU,IAAA,CAAAV,IAAA,CAAAa,MAAA;UACA;UACAC,YAAA,CAAAC,OAAA,cAAAL,IAAA,CAAAV,IAAA,CAAAgB,KAAA;UACA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;UACA;UACA,KAAAb,MAAA,GAAAK,IAAA,CAAAV,IAAA,CAAAmB,KAAA;UACA,KAAAC,oBAAA;QACA;MACA,GACAC,KAAA,CAAAC,CAAA;QACAX,OAAA,CAAAC,GAAA,CAAAU,CAAA;QACAvB,IAAA,CAAAwB,IAAA;UACAC,KAAA;UACAC,IAAA,EAAAH,CAAA;UACAI,IAAA;QACA;MACA;IACA;IACAN,qBAAA;MACA;MACA,IAAAO,aAAA;MACA,WAAAC,KAAA,SAAAvB,MAAA;QACA;QACAsB,aAAA,CAAAT,IAAA,MAAAb,MAAA,CAAAuB,KAAA;MACA;MACA;MACA,MAAAC,YAAA,GAAAF,aAAA,CAAAG,GAAA,CAAAX,KAAA,SAAAA,KAAA,IAAAY,IAAA;MACA;MACAhC,IAAA,CAAAwB,IAAA;QACAC,KAAA;QACAQ,IAAA,EAAAH,YAAA;QACAH,IAAA;QACAO,WAAA;UACAC,OAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}