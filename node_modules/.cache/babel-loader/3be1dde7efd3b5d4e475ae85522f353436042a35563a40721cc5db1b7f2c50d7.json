{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      form: {\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }\n    };\n  },\n  methods: {\n    resetPassword() {\n      // If passwords match, proceed with password reset logic\n      // You can call the backend API here\n      // For demonstration purposes, we will just log the data\n      console.log('Email:', this.form.email);\n      console.log('New Password:', this.form.password);\n      console.log('Confirm Password:', this.form.confirmPassword);\n    },\n    checkPasswordMatch() {\n      // Check if passwords match and set custom validity message\n      const confirmPasswordInput = document.getElementById('exampleInputConfirmPassword1');\n      if (this.form.password !== this.form.confirmPassword) {\n        confirmPasswordInput.setCustomValidity('Passwords do not match.');\n      } else {\n        confirmPasswordInput.setCustomValidity('');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","form","email","password","confirmPassword","methods","resetPassword","console","log","checkPasswordMatch","confirmPasswordInput","document","getElementById","setCustomValidity"],"sources":["src/components/ResetPasswordForm.vue"],"sourcesContent":["<!-- <template>\r\n    <div class=\"container p-5\">\r\n        <h3 class=\"text-center mt-2 mb-5\">Reset Password</h3>\r\n        <div class=\"col-md-12\">\r\n            <form v-on:submit.prevent=\"resetPassword\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputEmail1\" class=\"form-label\">Email Address *</label>\r\n                    <input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\"\r\n                        aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\" required>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputPassword1\" class=\"form-label\">New Password *</label>\r\n                    <input type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"\r\n                        placeholder=\"Enter New Password\" v-model=\"form.password\" required>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputConfirmPassword1\" class=\"form-label\">Confirm New Password *</label>\r\n                    <input type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"exampleInputConfirmPassword1\"\r\n                        placeholder=\"Confirm New Password\" v-model=\"form.confirmPassword\" required>\r\n                    <div v-if=\"form.password !== form.confirmPassword\" class=\"error-messages\">\r\n                        Passwords do not match.\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary mt-5\" :disabled=\"form.password !== form.confirmPassword\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</template> -->\r\n\r\n<template>\r\n    <div class=\"container p-5\">\r\n        <h3 class=\"text-center mt-2 mb-5\">Reset Password</h3>\r\n        <div class=\"col-md-12\">\r\n            <form v-on:submit.prevent=\"resetPassword\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputEmail1\" class=\"form-label\">Email Address *</label>\r\n                    <input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\"\r\n                        aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\" required />\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputPassword1\" class=\"form-label\">New Password *</label>\r\n                    <input type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"\r\n                        placeholder=\"Enter New Password\" v-model=\"form.password\" required />\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputConfirmPassword1\" class=\"form-label\">Confirm New Password *</label>\r\n                    <input type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"exampleInputConfirmPassword1\"\r\n                        placeholder=\"Confirm New Password\" v-model=\"form.confirmPassword\" required\r\n                        @input=\"checkPasswordMatch\" />\r\n                    <div id=\"confirmPasswordError\" class=\"text-danger\">\r\n                        <!-- The error message will be displayed here -->\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary mt-5\">Submit</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      form: {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    resetPassword() {\r\n      // If passwords match, proceed with password reset logic\r\n      // You can call the backend API here\r\n      // For demonstration purposes, we will just log the data\r\n      console.log('Email:', this.form.email);\r\n      console.log('New Password:', this.form.password);\r\n      console.log('Confirm Password:', this.form.confirmPassword);\r\n    },\r\n    checkPasswordMatch() {\r\n      // Check if passwords match and set custom validity message\r\n      const confirmPasswordInput = document.getElementById('exampleInputConfirmPassword1');\r\n      if (this.form.password !== this.form.confirmPassword) {\r\n        confirmPasswordInput.setCustomValidity('Passwords do not match.');\r\n      } else {\r\n        confirmPasswordInput.setCustomValidity('');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n  \r\n<style>\r\n.error-messages {\r\n    color: #dc3545;\r\n    /* Red color for error messages */\r\n    font-size: 14px;\r\n    /* Adjust font size as needed */\r\n    margin-top: 8px;\r\n    /* Add some space between the input field and error message */\r\n}\r\n</style>\r\n  "],"mappings":"AAoEA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,KAAA;QACAC,QAAA;QACAC,eAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,cAAA;MACA;MACA;MACA;MACAC,OAAA,CAAAC,GAAA,gBAAAP,IAAA,CAAAC,KAAA;MACAK,OAAA,CAAAC,GAAA,uBAAAP,IAAA,CAAAE,QAAA;MACAI,OAAA,CAAAC,GAAA,2BAAAP,IAAA,CAAAG,eAAA;IACA;IACAK,mBAAA;MACA;MACA,MAAAC,oBAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,SAAAX,IAAA,CAAAE,QAAA,UAAAF,IAAA,CAAAG,eAAA;QACAM,oBAAA,CAAAG,iBAAA;MACA;QACAH,oBAAA,CAAAG,iBAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}