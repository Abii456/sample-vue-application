{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { USER_BASE_URL } from '@/apiConfig';\nexport default {\n  data() {\n    return {\n      form: {\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }\n    };\n  },\n  methods: {\n    resetPassword() {\n      axios.put(`${USER_BASE_URL}update-user-details`, this.form).then(resp => {\n        //console.log(resp.data);\n        if (resp.data.status === 'success') {\n          localStorage.setItem('authToken', resp.data.data.token);\n          localStorage.setItem('userData', JSON.stringify(resp.data.data));\n          Swal.fire({\n            title: 'Success',\n            text: 'Password has been reset.',\n            icon: 'success'\n          }).then(() => {\n            this.$nextTick(() => {\n              this.$router.push('/welcome');\n            });\n          });\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: resp.data.error,\n            icon: 'error'\n          });\n        }\n      }).catch(error => {\n        console.log(error.response);\n        if (error.response && error.response.data && error.response.data.error) {\n          Swal.fire({\n            title: 'Error',\n            text: error.response.data.error,\n            icon: 'error'\n          });\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: 'An error occurred. Please try again later.',\n            icon: 'error'\n          });\n        }\n      });\n    },\n    checkPasswordMatch() {\n      const confirmPasswordInput = document.getElementById('exampleInputConfirmPassword1');\n      if (this.form.password !== this.form.confirmPassword) {\n        confirmPasswordInput.setCustomValidity('Passwords do not match.');\n      } else {\n        confirmPasswordInput.setCustomValidity('');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","Swal","USER_BASE_URL","data","form","email","password","confirmPassword","methods","resetPassword","put","then","resp","status","localStorage","setItem","token","JSON","stringify","fire","title","text","icon","$nextTick","$router","push","error","catch","console","log","response","checkPasswordMatch","confirmPasswordInput","document","getElementById","setCustomValidity"],"sources":["src/components/ResetPasswordForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container p-5\">\r\n        <h3 class=\"text-center mt-2 mb-5\">Reset Password</h3>\r\n        <div class=\"col-md-12\">\r\n            <form v-on:submit.prevent=\"resetPassword\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"email\" class=\"form-label\">Email Address *</label>\r\n                    <input type=\"email\" name=\"email\" class=\"form-control\" id=\"email\"\r\n                        aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\" required />\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"password\" class=\"form-label\">New Password *</label>\r\n                    <input type=\"password\" name=\"password\" class=\"form-control\" id=\"password\"\r\n                        placeholder=\"Enter New Password\" v-model=\"form.password\" required />\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"confirmPassword\" class=\"form-label\">Confirm New Password *</label>\r\n                    <input type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"confirmPassword\"\r\n                        placeholder=\"Confirm New Password\" v-model=\"form.confirmPassword\" required\r\n                        @input=\"checkPasswordMatch\" />\r\n                    <div id=\"confirmPasswordError\" class=\"text-danger\">\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary mt-5\">Submit</button><br>\r\n\r\n                <router-link to=\"/register\" class=\"ml-3\">Don't have an account? Register here</router-link><br>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport { USER_BASE_URL } from '@/apiConfig';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            form: {\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n            },\r\n        };\r\n    },\r\n    methods: {\r\n        resetPassword() {\r\n            axios\r\n                .put(`${USER_BASE_URL}update-user-details`, this.form)\r\n                .then((resp) => {\r\n                    //console.log(resp.data);\r\n                    if (resp.data.status === 'success') {\r\n                        localStorage.setItem('authToken', resp.data.data.token);\r\n                        localStorage.setItem('userData', JSON.stringify(resp.data.data));\r\n                        Swal.fire({\r\n                            title: 'Success',\r\n                            text: 'Password has been reset.',\r\n                            icon: 'success',\r\n                        }).then(() => {\r\n                            this.$nextTick(() => {\r\n                                this.$router.push('/welcome');\r\n                            });\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            title: 'Error',\r\n                            text: resp.data.error,\r\n                            icon: 'error',\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error.response);\r\n                    if (error.response && error.response.data && error.response.data.error) {\r\n                        Swal.fire({\r\n                            title: 'Error',\r\n                            text: error.response.data.error,\r\n                            icon: 'error',\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            title: 'Error',\r\n                            text: 'An error occurred. Please try again later.',\r\n                            icon: 'error',\r\n                        });\r\n                    }\r\n                });\r\n        },\r\n        checkPasswordMatch() {\r\n            const confirmPasswordInput = document.getElementById('exampleInputConfirmPassword1');\r\n            if (this.form.password !== this.form.confirmPassword) {\r\n                confirmPasswordInput.setCustomValidity('Passwords do not match.');\r\n            } else {\r\n                confirmPasswordInput.setCustomValidity('');\r\n            }\r\n        },\r\n    },\r\n};\r\n\r\n</script>\r\n  \r\n<style></style>\r\n  "],"mappings":";AAmCA,OAAAA,KAAA;AACA,OAAAC,IAAA;AACA,SAAAC,aAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,KAAA;QACAC,QAAA;QACAC,eAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,cAAA;MACAT,KAAA,CACAU,GAAA,IAAAR,aAAA,4BAAAE,IAAA,EACAO,IAAA,CAAAC,IAAA;QACA;QACA,IAAAA,IAAA,CAAAT,IAAA,CAAAU,MAAA;UACAC,YAAA,CAAAC,OAAA,cAAAH,IAAA,CAAAT,IAAA,CAAAA,IAAA,CAAAa,KAAA;UACAF,YAAA,CAAAC,OAAA,aAAAE,IAAA,CAAAC,SAAA,CAAAN,IAAA,CAAAT,IAAA,CAAAA,IAAA;UACAF,IAAA,CAAAkB,IAAA;YACAC,KAAA;YACAC,IAAA;YACAC,IAAA;UACA,GAAAX,IAAA;YACA,KAAAY,SAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;UACA;QACA;UACAxB,IAAA,CAAAkB,IAAA;YACAC,KAAA;YACAC,IAAA,EAAAT,IAAA,CAAAT,IAAA,CAAAuB,KAAA;YACAJ,IAAA;UACA;QACA;MACA,GACAK,KAAA,CAAAD,KAAA;QACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA,CAAAI,QAAA;QACA,IAAAJ,KAAA,CAAAI,QAAA,IAAAJ,KAAA,CAAAI,QAAA,CAAA3B,IAAA,IAAAuB,KAAA,CAAAI,QAAA,CAAA3B,IAAA,CAAAuB,KAAA;UACAzB,IAAA,CAAAkB,IAAA;YACAC,KAAA;YACAC,IAAA,EAAAK,KAAA,CAAAI,QAAA,CAAA3B,IAAA,CAAAuB,KAAA;YACAJ,IAAA;UACA;QACA;UACArB,IAAA,CAAAkB,IAAA;YACAC,KAAA;YACAC,IAAA;YACAC,IAAA;UACA;QACA;MACA;IACA;IACAS,mBAAA;MACA,MAAAC,oBAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,SAAA9B,IAAA,CAAAE,QAAA,UAAAF,IAAA,CAAAG,eAAA;QACAyB,oBAAA,CAAAG,iBAAA;MACA;QACAH,oBAAA,CAAAG,iBAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}