{"ast":null,"code":"import axios from 'axios';\nimport Swal from 'sweetalert2';\nexport default {\n  data() {\n    return {\n      form: {\n        email: ''\n      },\n      $v: {} // Form validation object\n    };\n  },\n\n  methods: {\n    resetPassword() {\n      // Perform form validation before making the API call\n      this.$v.$touch();\n      if (this.$v.$error) {\n        // Show error message if there are validation errors\n        Swal.fire({\n          title: 'Please fix the following errors:',\n          html: `<div class=\"error-messages\">• Email is required and must be a valid email address.</div>`,\n          icon: 'warning'\n        });\n        return;\n      }\n\n      // API call to reset password\n      axios.post('http://127.0.0.1:8000/api/reset-password', this.form).then(resp => {\n        console.log(resp.data);\n        if (resp.data.status === 'success') {\n          // Show success message if password reset is successful\n          Swal.fire({\n            title: 'Password Reset Successful',\n            text: 'An email with instructions to reset your password has been sent.',\n            icon: 'success'\n          });\n        } else {\n          // Show error message if password reset fails\n          Swal.fire({\n            title: 'Reset Password Failed',\n            text: 'Could not reset password. Please try again later.',\n            icon: 'error'\n          });\n        }\n      }).catch(e => {\n        console.log(e);\n        Swal.fire({\n          title: 'Hurry',\n          text: e,\n          icon: 'warning'\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","Swal","data","form","email","$v","methods","resetPassword","$touch","$error","fire","title","html","icon","post","then","resp","console","log","status","text","catch","e"],"sources":["src/components/ResetPasswordForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container p-5\">\r\n      <h3 class=\"text-center mt-2 mb-5\">Reset Password</h3>\r\n      <div class=\"col-md-12\">\r\n        <form v-on:submit.prevent=\"resetPassword\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"exampleInputEmail1\" class=\"form-label\">Enter Email*</label>\r\n            <input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\" required>\r\n            <!-- Email validation message -->\r\n            <!-- <div v-if=\"!$v.form.email.email\" class=\"text-danger\">\r\n              Invalid email format.\r\n            </div> -->\r\n          </div>\r\n  \r\n          <button type=\"submit\" class=\"btn btn-primary mt-5\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  import Swal from 'sweetalert2';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {\r\n          email: ''\r\n        },\r\n        $v: {} // Form validation object\r\n      };\r\n    },\r\n    methods: {\r\n      resetPassword() {\r\n        // Perform form validation before making the API call\r\n        this.$v.$touch();\r\n        if (this.$v.$error) {\r\n          // Show error message if there are validation errors\r\n          Swal.fire({\r\n            title: 'Please fix the following errors:',\r\n            html: `<div class=\"error-messages\">• Email is required and must be a valid email address.</div>`,\r\n            icon: 'warning'\r\n          });\r\n          return;\r\n        }\r\n  \r\n        // API call to reset password\r\n        axios.post('http://127.0.0.1:8000/api/reset-password', this.form)\r\n          .then((resp) => {\r\n            console.log(resp.data);\r\n            if (resp.data.status === 'success') {\r\n              // Show success message if password reset is successful\r\n              Swal.fire({\r\n                title: 'Password Reset Successful',\r\n                text: 'An email with instructions to reset your password has been sent.',\r\n                icon: 'success',\r\n              });\r\n            } else {\r\n              // Show error message if password reset fails\r\n              Swal.fire({\r\n                title: 'Reset Password Failed',\r\n                text: 'Could not reset password. Please try again later.',\r\n                icon: 'error',\r\n              });\r\n            }\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n            Swal.fire({\r\n              title: 'Hurry',\r\n              text: e,\r\n              icon: 'warning',\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Custom CSS for error messages */\r\n  .error-messages {\r\n    text-align: left;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAqBA,OAAAA,KAAA;AACA,OAAAC,IAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,KAAA;MACA;MACAC,EAAA;IACA;EACA;;EACAC,OAAA;IACAC,cAAA;MACA;MACA,KAAAF,EAAA,CAAAG,MAAA;MACA,SAAAH,EAAA,CAAAI,MAAA;QACA;QACAR,IAAA,CAAAS,IAAA;UACAC,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACA;MACA;;MAEA;MACAb,KAAA,CAAAc,IAAA,kDAAAX,IAAA,EACAY,IAAA,CAAAC,IAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,IAAA,CAAAd,IAAA;QACA,IAAAc,IAAA,CAAAd,IAAA,CAAAiB,MAAA;UACA;UACAlB,IAAA,CAAAS,IAAA;YACAC,KAAA;YACAS,IAAA;YACAP,IAAA;UACA;QACA;UACA;UACAZ,IAAA,CAAAS,IAAA;YACAC,KAAA;YACAS,IAAA;YACAP,IAAA;UACA;QACA;MACA,GACAQ,KAAA,CAAAC,CAAA;QACAL,OAAA,CAAAC,GAAA,CAAAI,CAAA;QACArB,IAAA,CAAAS,IAAA;UACAC,KAAA;UACAS,IAAA,EAAAE,CAAA;UACAT,IAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}