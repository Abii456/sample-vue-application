{"ast":null,"code":"import axios from 'axios';\nimport router from '@/router';\nexport default {\n  data() {\n    return {\n      form: {\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      resetToken: null\n    };\n  },\n  created() {\n    // Get the reset token from the URL query parameters\n    this.resetToken = this.$route.query.token;\n  },\n  methods: {\n    resetPassword() {\n      // Use this.resetToken in the Axios POST request\n      axios.post('http://127.0.0.1:8000/api/reset-password', {\n        token: this.resetToken,\n        // Use the reset token from the URL\n        email: this.form.email,\n        password: this.form.password\n      }).then(response => {\n        // ... rest of the resetPassword method ...\n      }).catch(error => {\n        // ... rest of the resetPassword method ...\n      });\n    },\n    checkPasswordMatch() {\n      const confirmPasswordInput = document.getElementById('exampleInputConfirmPassword1');\n      if (this.form.password !== this.form.confirmPassword) {\n        confirmPasswordInput.setCustomValidity('Passwords do not match.');\n      } else {\n        confirmPasswordInput.setCustomValidity('');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","router","data","form","email","password","confirmPassword","resetToken","created","$route","query","token","methods","resetPassword","post","then","response","catch","error","checkPasswordMatch","confirmPasswordInput","document","getElementById","setCustomValidity"],"sources":["src/components/ResetPasswordForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container p-5\">\r\n        <h3 class=\"text-center mt-2 mb-5\">Reset Password</h3>\r\n        <div class=\"col-md-12\">\r\n            <form v-on:submit.prevent=\"resetPassword\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputEmail1\" class=\"form-label\">Email Address *</label>\r\n                    <input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\"\r\n                        aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" v-model=\"form.email\" required />\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputPassword1\" class=\"form-label\">New Password *</label>\r\n                    <input type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"\r\n                        placeholder=\"Enter New Password\" v-model=\"form.password\" required />\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputConfirmPassword1\" class=\"form-label\">Confirm New Password *</label>\r\n                    <input type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"exampleInputConfirmPassword1\"\r\n                        placeholder=\"Confirm New Password\" v-model=\"form.confirmPassword\" required\r\n                        @input=\"checkPasswordMatch\" />\r\n                    <div id=\"confirmPasswordError\" class=\"text-danger\">\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary mt-5\">Submit</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\nimport axios from 'axios';\r\nimport router from '@/router';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      form: {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n      },\r\n      resetToken: null,\r\n    };\r\n  },\r\n  created() {\r\n    // Get the reset token from the URL query parameters\r\n    this.resetToken = this.$route.query.token;\r\n  },\r\n  methods: {\r\n    resetPassword() {\r\n      // Use this.resetToken in the Axios POST request\r\n      axios\r\n        .post('http://127.0.0.1:8000/api/reset-password', {\r\n          token: this.resetToken, // Use the reset token from the URL\r\n          email: this.form.email,\r\n          password: this.form.password,\r\n        })\r\n        .then((response) => {\r\n          // ... rest of the resetPassword method ...\r\n        })\r\n        .catch((error) => {\r\n          // ... rest of the resetPassword method ...\r\n        });\r\n    },\r\n    checkPasswordMatch() {\r\n      const confirmPasswordInput = document.getElementById('exampleInputConfirmPassword1');\r\n      if (this.form.password !== this.form.confirmPassword) {\r\n        confirmPasswordInput.setCustomValidity('Passwords do not match.');\r\n      } else {\r\n        confirmPasswordInput.setCustomValidity('');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n  \r\n<style>\r\n</style>\r\n  "],"mappings":"AAiCA,OAAAA,KAAA;AACA,OAAAC,MAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,KAAA;QACAC,QAAA;QACAC,eAAA;MACA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAD,UAAA,QAAAE,MAAA,CAAAC,KAAA,CAAAC,KAAA;EACA;EACAC,OAAA;IACAC,cAAA;MACA;MACAb,KAAA,CACAc,IAAA;QACAH,KAAA,OAAAJ,UAAA;QAAA;QACAH,KAAA,OAAAD,IAAA,CAAAC,KAAA;QACAC,QAAA,OAAAF,IAAA,CAAAE;MACA,GACAU,IAAA,CAAAC,QAAA;QACA;MAAA,CACA,EACAC,KAAA,CAAAC,KAAA;QACA;MAAA,CACA;IACA;IACAC,mBAAA;MACA,MAAAC,oBAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,SAAAnB,IAAA,CAAAE,QAAA,UAAAF,IAAA,CAAAG,eAAA;QACAc,oBAAA,CAAAG,iBAAA;MACA;QACAH,oBAAA,CAAAG,iBAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}